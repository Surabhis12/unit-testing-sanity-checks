name: Sanity Check Workflow

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  sanity-check:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v39
        with:
          files: |
            **/*.c
            **/*.cpp
            **/*.h
            **/*.hpp
            **/*.js
            **/*.jsx
            **/*.ts
            **/*.tsx
            **/*.rs
            **/*.kt
            **/*.swift
            **/*.java
            **/*.dart
      
      - name: Check if PR is from fork
        id: check-fork
        run: |
          echo "Source repo: ${{ github.event.pull_request.head.repo.full_name }}"
          echo "Target repo: ${{ github.repository }}"
          
          if [ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]; then
            echo "is_fork=true" >> $GITHUB_OUTPUT
            echo "⚠️ This PR is from a fork (different repository)"
            echo "   Source: ${{ github.event.pull_request.head.repo.full_name }}"
            echo "   Target: ${{ github.repository }}"
            echo "   Comments and labels will be skipped due to GitHub security restrictions"
          else
            echo "is_fork=false" >> $GITHUB_OUTPUT
            echo "✅ This PR is from the same repository"
            echo "   Full functionality available (comments + labels)"
          fi
      
      - name: Detect languages
        if: steps.changed-files.outputs.any_changed == 'true'
        id: detect
        run: |
          echo "${{ steps.changed-files.outputs.all_changed_files }}" > changed_files.txt
          chmod +x scripts/detect-language.sh
          bash scripts/detect-language.sh
          
          source detected_languages.env
          
          echo "has_cpp=$HAS_CPP" >> $GITHUB_OUTPUT
          echo "has_js=$HAS_JS" >> $GITHUB_OUTPUT
          echo "has_rust=$HAS_RUST" >> $GITHUB_OUTPUT
          echo "has_kotlin=$HAS_KOTLIN" >> $GITHUB_OUTPUT
          echo "has_swift=$HAS_SWIFT" >> $GITHUB_OUTPUT
          echo "has_java=$HAS_JAVA" >> $GITHUB_OUTPUT
          echo "has_flutter=$HAS_FLUTTER" >> $GITHUB_OUTPUT
      
      - name: Install C/C++ tools
        if: steps.detect.outputs.has_cpp == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y cppcheck
      
      - name: Setup Node.js and ESLint
        if: steps.detect.outputs.has_js == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Setup Rust and Clippy
        if: steps.detect.outputs.has_rust == 'true'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy
          override: true
      
      - name: Setup Java
        if: steps.detect.outputs.has_java == 'true'
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Install Kotlin linter
        if: steps.detect.outputs.has_kotlin == 'true'
        run: |
          curl -sSLO https://github.com/pinterest/ktlint/releases/download/0.50.0/ktlint
          chmod a+x ktlint
          sudo mv ktlint /usr/local/bin/
      
      - name: Setup Flutter
        if: steps.detect.outputs.has_flutter == 'true'
        run: |
          git clone https://github.com/flutter/flutter.git -b stable --depth 1
          echo "$GITHUB_WORKSPACE/flutter/bin" >> $GITHUB_PATH
      
      - name: Run sanity checks
        if: steps.changed-files.outputs.any_changed == 'true'
        id: run-checks
        run: |
          chmod +x scripts/*.sh
          
          echo "=== Running Checks ==="
          bash scripts/run-checks.sh > check_results.txt 2>&1 || true
          
          echo ""
          echo "=== Checking Results ==="
          cat check_results.txt
          
          echo ""
          echo "=== Looking for PASSED marker ==="
          grep "ALL SANITY CHECKS PASSED" check_results.txt || echo "NOT FOUND"
          
          echo ""
          echo "=== Looking for FAILED marker ==="
          grep "SANITY CHECKS FAILED" check_results.txt || echo "NOT FOUND"
          
          echo ""
          echo "=== Setting Status ==="
          if grep -q "ALL SANITY CHECKS PASSED" check_results.txt; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "✅ STATUS SET TO: success"
          elif grep -q "SANITY CHECKS FAILED" check_results.txt; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "❌ STATUS SET TO: failure"
          else
            echo "status=unknown" >> $GITHUB_OUTPUT
            echo "⚠️ STATUS SET TO: unknown (no marker found)"
          fi
      
      - name: Print results summary to logs (always visible)
        if: steps.changed-files.outputs.any_changed == 'true' && always()
        run: |
          echo ""
          echo "========================================="
          echo "   SANITY CHECK RESULTS SUMMARY"
          echo "========================================="
          echo ""
          echo "Status: ${{ steps.run-checks.outputs.status }}"
          echo "Is from fork: ${{ steps.check-fork.outputs.is_fork }}"
          echo ""
          echo "--- Detailed Results ---"
          cat check_results.txt
          echo ""
          echo "========================================="
          
          if [ "${{ steps.run-checks.outputs.status }}" == "success" ]; then
            echo "::notice::✅ All sanity checks PASSED"
          elif [ "${{ steps.run-checks.outputs.status }}" == "failure" ]; then
            echo "::error::❌ Sanity checks FAILED - see details above"
          else
            echo "::warning::⚠️ Sanity check status is UNKNOWN"
          fi
      
      - name: Post results as PR comment (only for same-repo PRs)
        if: steps.changed-files.outputs.any_changed == 'true' && steps.check-fork.outputs.is_fork == 'false' && always()
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');
            let results = 'No results file found';
            
            try {
              results = fs.readFileSync('check_results.txt', 'utf8');
            } catch (error) {
              results = 'Error reading results: ' + error.message;
            }
            
            const status = '${{ steps.run-checks.outputs.status }}';
            const statusEmoji = status === 'success' ? '✅' : '❌';
            const statusText = status === 'success' ? 'PASSED' : 'FAILED';
            
            const body = `## ${statusEmoji} Sanity Check ${statusText}
            
            <details>
            <summary>Click to view detailed results</summary>
            
            \`\`\`
            ${results}
            \`\`\`
            
            </details>
            
            ---
            *Automated sanity checks completed at ${new Date().toISOString()}*`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
            
            console.log('✅ PR comment posted successfully');
      
      - name: Add Sanity Check label (only for same-repo PRs)
        if: steps.changed-files.outputs.any_changed == 'true' && steps.check-fork.outputs.is_fork == 'false' && always()
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const status = '${{ steps.run-checks.outputs.status }}';
            const label = status === 'success' ? 'sanity-check-passed' : 'sanity-check-failed';
            
            const oppositeLabel = status === 'success' ? 'sanity-check-failed' : 'sanity-check-passed';
            
            // Remove opposite label if it exists
            try {
              await github.rest.issues.removeLabel({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: oppositeLabel
              });
              console.log(`Removed opposite label: ${oppositeLabel}`);
            } catch (error) {
              // Label doesn't exist, that's fine
              console.log(`Opposite label ${oppositeLabel} not found (OK)`);
            }
            
            // Add the correct label
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: [label]
            });
            
            console.log(`✅ Label added: ${label}`);
      
      - name: Notice for fork PRs
        if: steps.changed-files.outputs.any_changed == 'true' && steps.check-fork.outputs.is_fork == 'true' && always()
        run: |
          echo ""
          echo "========================================="
          echo "   FORK PR DETECTED"
          echo "========================================="
          echo ""
          echo "This PR is from a forked repository:"
          echo "  Source: ${{ github.event.pull_request.head.repo.full_name }}"
          echo "  Target: ${{ github.repository }}"
          echo ""
          echo "Due to GitHub security restrictions:"
          echo "  ❌ PR comments cannot be posted"
          echo "  ❌ Labels cannot be added"
          echo "  ✅ Sanity checks still run normally"
          echo "  ✅ Workflow will fail if checks fail"
          echo ""
          echo "Check results: ${{ steps.run-checks.outputs.status }}"
          echo ""
          echo "See detailed results in the logs above."
          echo "========================================="
          
          if [ "${{ steps.run-checks.outputs.status }}" == "success" ]; then
            echo "::notice::✅ FORK PR - Sanity checks PASSED (comment/label skipped)"
          elif [ "${{ steps.run-checks.outputs.status }}" == "failure" ]; then
            echo "::error::❌ FORK PR - Sanity checks FAILED (comment/label skipped)"
          fi
      
      - name: Fail workflow if checks failed
        if: steps.run-checks.outputs.status == 'failure'
        run: |
          echo ""
          echo "========================================="
          echo "   ❌ WORKFLOW FAILED"
          echo "========================================="
          echo ""
          echo "Sanity checks detected issues that must be fixed."
          echo ""
          echo "Please review the detailed results above and:"
          echo "  1. Fix all reported issues"
          echo "  2. Commit and push your fixes"
          echo "  3. The workflow will re-run automatically"
          echo ""
          echo "This PR cannot be merged until all checks pass."
          echo "========================================="
          echo ""
          echo "::error::Sanity checks failed. Please fix the issues before merging."
          exit 1
      
      - name: Success summary
        if: steps.run-checks.outputs.status == 'success'
        run: |
          echo ""
          echo "========================================="
          echo "   ✅ WORKFLOW SUCCEEDED"
          echo "========================================="
          echo ""
          echo "All sanity checks passed!"
          echo ""
          if [ "${{ steps.check-fork.outputs.is_fork }}" == "false" ]; then
            echo "✅ PR comment posted"
            echo "✅ Label added"
          else
            echo "ℹ️ Fork PR - comment/label skipped (checks still passed)"
          fi
          echo ""
          echo "This PR is ready for review and merge."
          echo "========================================="