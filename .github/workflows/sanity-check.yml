name: Sanity Checks and Static Analysis

on:
  pull_request:
    types: [opened, synchronize, reopened]
    # Runs on PRs to all branches - comprehensive coverage

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  sanity-checks:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Fetch PR information
        id: pr-info
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get PR details
          PR_NUMBER="${{ github.event.pull_request.number }}"
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "base_sha=$BASE_SHA" >> $GITHUB_OUTPUT
          echo "head_sha=$HEAD_SHA" >> $GITHUB_OUTPUT
          
          # Get changed files
          gh pr view $PR_NUMBER --json files --jq '.files[].path' > changed_files.txt
          
          echo "Changed files:"
          cat changed_files.txt
      
      - name: Set up environment
        run: |
          # Make scripts executable
          chmod +x scripts/*.sh
          
          # Install dependencies
          sudo apt-get update
          
          # C/C++ tools
          sudo apt-get install -y cppcheck
          
          # JavaScript/TypeScript tools
          npm install -g eslint
          
          # Java tools
          wget -q https://github.com/checkstyle/checkstyle/releases/download/checkstyle-10.12.5/checkstyle-10.12.5-all.jar
          mkdir -p tools
          mv checkstyle-10.12.5-all.jar tools/checkstyle.jar
          
          # Rust tools (if Rust is installed)
          if command -v cargo &> /dev/null; then
            rustup component add clippy
          fi
          
          # Kotlin tools
          wget -q https://github.com/pinterest/ktlint/releases/download/1.0.1/ktlint
          chmod +x ktlint
          mv ktlint tools/
          
          # Dart/Flutter tools (install Dart SDK if needed)
          if ! command -v dart &> /dev/null; then
            wget -q https://storage.googleapis.com/dart-archive/channels/stable/release/latest/sdk/dartsdk-linux-x64-release.zip
            unzip -q dartsdk-linux-x64-release.zip
            echo "$PWD/dart-sdk/bin" >> $GITHUB_PATH
          fi
      
      - name: Detect languages
        id: detect
        run: |
          ./scripts/detect-language.sh
          
          # Read detected languages
          if [ -f detected_languages.txt ]; then
            LANGUAGES=$(cat detected_languages.txt | tr '\n' ',' | sed 's/,$//')
            echo "languages=$LANGUAGES" >> $GITHUB_OUTPUT
            echo "Detected languages: $LANGUAGES"
          else
            echo "languages=none" >> $GITHUB_OUTPUT
            echo "No supported languages detected"
          fi
      
      - name: Run sanity checks
        id: checks
        run: |
          ./scripts/run-checks.sh > check_results.txt 2>&1
          CHECK_EXIT_CODE=$?
          
          echo "exit_code=$CHECK_EXIT_CODE" >> $GITHUB_OUTPUT
          
          # Display results
          cat check_results.txt
          
          exit $CHECK_EXIT_CODE
        continue-on-error: true
      
      - name: Generate PR comment
        id: comment
        run: |
          # Create comment body
          cat > pr_comment.md << 'EOF'
          ## üîç Sanity Check Results
          
          **Branch:** `${{ github.head_ref }}`
          **Commit:** `${{ github.event.pull_request.head.sha }}`
          **Languages Detected:** ${{ steps.detect.outputs.languages }}
          
          ---
          
          EOF
          
          # Add check results
          if [ -f check_results.txt ]; then
            cat check_results.txt >> pr_comment.md
          else
            echo "‚ö†Ô∏è No check results available" >> pr_comment.md
          fi
          
          # Add footer
          cat >> pr_comment.md << 'EOF'
          
          ---
          
          EOF
          
          if [ "${{ steps.checks.outputs.exit_code }}" == "0" ]; then
            echo "‚úÖ **All checks passed!** This PR is ready for review." >> pr_comment.md
          else
            echo "‚ùå **Some checks failed.** Please review and fix the issues above." >> pr_comment.md
          fi
          
          # Save for next step
          cat pr_comment.md
      
      - name: Post PR comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const commentBody = fs.readFileSync('pr_comment.md', 'utf8');
            
            // Check if we already commented
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('üîç Sanity Check Results')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
      
      - name: Apply label
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const exitCode = '${{ steps.checks.outputs.exit_code }}';
            const labelToAdd = exitCode === '0' ? 'sanity-check-passed' : 'sanity-check-failed';
            const labelToRemove = exitCode === '0' ? 'sanity-check-failed' : 'sanity-check-passed';
            
            // Remove old label if exists
            try {
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                name: labelToRemove
              });
            } catch (error) {
              // Label might not exist, ignore
            }
            
            // Create label if it doesn't exist
            try {
              await github.rest.issues.createLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: labelToAdd,
                color: exitCode === '0' ? '0e8a16' : 'd73a4a',
                description: exitCode === '0' ? 'All sanity checks passed' : 'Sanity checks failed'
              });
            } catch (error) {
              // Label already exists, ignore
            }
            
            // Add label to PR
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: [labelToAdd]
            });
      
      - name: Final status
        run: |
          if [ "${{ steps.checks.outputs.exit_code }}" != "0" ]; then
            echo "‚ùå Sanity checks failed"
            exit 1
          else
            echo "‚úÖ All sanity checks passed"
            exit 0
          fi